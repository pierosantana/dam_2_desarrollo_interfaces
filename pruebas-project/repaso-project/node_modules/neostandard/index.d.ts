declare namespace _exports {
    export { NeostandardOptions };
}
declare function _exports(options?: import("./lib/main").NeostandardOptions): import("eslint").Linter.Config[];
declare namespace _exports {
    let resolveIgnoresFromGitignore: typeof import("./lib/resolve-gitignore").resolveIgnoresFromGitignore;
    let plugins: {
        readonly '@stylistic': typeof import("@stylistic/eslint-plugin");
        readonly 'import-x': {
            configs: {
                recommended: {
                    plugins: ["import-x"];
                    rules: {
                        "import-x/no-unresolved": "error";
                        "import-x/named": "error";
                        "import-x/namespace": "error";
                        "import-x/default": "error";
                        "import-x/export": "error";
                        "import-x/no-named-as-default": "warn";
                        "import-x/no-named-as-default-member": "warn";
                        "import-x/no-duplicates": "warn";
                    };
                    parserOptions: {
                        sourceType: "module";
                        ecmaVersion: 2018;
                    };
                };
                errors: {
                    plugins: ["import-x"];
                    rules: {
                        "import-x/no-unresolved": 2;
                        "import-x/named": 2;
                        "import-x/namespace": 2;
                        "import-x/default": 2;
                        "import-x/export": 2;
                    };
                };
                warnings: {
                    plugins: ["import-x"];
                    rules: {
                        "import-x/no-named-as-default": 1;
                        "import-x/no-named-as-default-member": 1;
                        "import-x/no-rename-default": 1;
                        "import-x/no-duplicates": 1;
                    };
                };
                "stage-0": import("eslint-plugin-import-x/types.js").PluginConfig;
                react: {
                    settings: {
                        "import-x/extensions": (".js" | ".jsx")[];
                    };
                    languageOptions: {
                        parserOptions: {
                            ecmaFeatures: {
                                jsx: true;
                            };
                        };
                    };
                };
                "react-native": {
                    settings: {
                        "import-x/resolver": {
                            node: {
                                extensions: string[];
                            };
                        };
                    };
                };
                electron: {
                    settings: {
                        "import-x/core-modules": string[];
                    };
                };
                typescript: {
                    settings: {
                        "import-x/extensions": readonly [".ts", ".tsx", ".cts", ".mts", ".js", ".jsx", ".cjs", ".mjs"];
                        "import-x/external-module-folders": string[];
                        "import-x/parsers": {
                            "@typescript-eslint/parser": (".ts" | ".tsx" | ".cts" | ".mts")[];
                        };
                        "import-x/resolver": {
                            typescript: true;
                        };
                    };
                    rules: {
                        "import-x/named": "off";
                    };
                };
            };
            flatConfigs: {
                recommended: import("eslint-plugin-import-x/types.js").PluginFlatConfig;
                errors: import("eslint-plugin-import-x/types.js").PluginFlatConfig;
                warnings: import("eslint-plugin-import-x/types.js").PluginFlatConfig;
                "stage-0": import("eslint-plugin-import-x/types.js").PluginFlatConfig;
                react: {
                    settings: {
                        "import-x/extensions": (".js" | ".mjs" | ".cjs" | ".jsx")[];
                    };
                    languageOptions: {
                        parserOptions: {
                            ecmaFeatures: {
                                jsx: true;
                            };
                        };
                    };
                };
                "react-native": {
                    settings: {
                        "import-x/resolver": {
                            node: {
                                extensions: string[];
                            };
                        };
                    };
                };
                electron: {
                    settings: {
                        "import-x/core-modules": string[];
                    };
                };
                typescript: {
                    settings: {
                        "import-x/extensions": readonly [".ts", ".tsx", ".cts", ".mts", ".js", ".jsx", ".cjs", ".mjs"];
                        "import-x/external-module-folders": string[];
                        "import-x/parsers": {
                            "@typescript-eslint/parser": (".ts" | ".tsx" | ".cts" | ".mts")[];
                        };
                        "import-x/resolver": {
                            typescript: true;
                        };
                    };
                    rules: {
                        "import-x/named": "off";
                    };
                };
            };
            rules: {
                "no-unresolved": import("@typescript-eslint/utils/ts-eslint").RuleModule<"unresolved" | "casingMismatch", [((import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions & {
                    caseSensitive?: boolean;
                    caseSensitiveStrict?: boolean;
                }) | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                named: import("@typescript-eslint/utils/ts-eslint").RuleModule<"notFound" | "notFoundDeep", [(import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                default: import("@typescript-eslint/utils/ts-eslint").RuleModule<"noDefaultExport", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                namespace: import("@typescript-eslint/utils/ts-eslint").RuleModule<"noNamesFound" | "computedReference" | "namespaceMember" | "topLevelNames" | "notFoundInNamespace" | "notFoundInNamespaceDeep", [{
                    allowComputed?: boolean;
                }], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-namespace": import("@typescript-eslint/utils/ts-eslint").RuleModule<"noNamespace", [({
                    ignore?: string[];
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                export: import("@typescript-eslint/utils/ts-eslint").RuleModule<"noNamed" | "multiDefault" | "multiNamed", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-mutable-exports": import("@typescript-eslint/utils/ts-eslint").RuleModule<"noMutable", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                extensions: import("@typescript-eslint/utils/ts-eslint").RuleModule<"missing" | "missingKnown" | "unexpected", [] | ["always" | "ignorePackages" | "never"] | ["always" | "ignorePackages" | "never", {
                    ignorePackages?: boolean;
                    checkTypeImports?: boolean;
                }] | ["always" | "ignorePackages" | "never", {
                    ignorePackages?: boolean;
                    checkTypeImports?: boolean;
                    pattern: Partial<Record<string, "always" | "ignorePackages" | "never">>;
                }] | ["always" | "ignorePackages" | "never", Partial<Record<string, "always" | "ignorePackages" | "never">>] | [Partial<Record<string, "always" | "ignorePackages" | "never">>], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-restricted-paths": import("@typescript-eslint/utils/ts-eslint").RuleModule<"path" | "mixedGlob" | "glob" | "zone", [({
                    basePath?: string;
                    zones?: Array<{
                        from: import("eslint-plugin-import-x/types.js").Arrayable<string>;
                        target: import("eslint-plugin-import-x/types.js").Arrayable<string>;
                        message?: string;
                        except?: string[];
                    }>;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-internal-modules": import("@typescript-eslint/utils/ts-eslint").RuleModule<"noAllowed", [({
                    allow?: string[];
                    forbid?: string[];
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "group-exports": import("@typescript-eslint/utils/ts-eslint").RuleModule<"ExportNamedDeclaration" | "AssignmentExpression", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-relative-packages": import("@typescript-eslint/utils/ts-eslint").RuleModule<"noAllowed", [(import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-relative-parent-imports": import("@typescript-eslint/utils/ts-eslint").RuleModule<"noAllowed", [(import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "consistent-type-specifier-style": import("@typescript-eslint/utils/ts-eslint").RuleModule<"inline" | "topLevel", [(("prefer-inline" | "prefer-top-level") | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-self-import": import("@typescript-eslint/utils/ts-eslint").RuleModule<"self", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-cycle": import("@typescript-eslint/utils/ts-eslint").RuleModule<"cycle" | "cycleSource", [(({
                    allowUnsafeDynamicCyclicDependency?: boolean;
                    ignoreExternal?: boolean;
                    maxDepth?: number | "\u221E";
                } & import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions) | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-named-default": import("@typescript-eslint/utils/ts-eslint").RuleModule<"default", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-named-as-default": import("@typescript-eslint/utils/ts-eslint").RuleModule<"default", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-named-as-default-member": import("@typescript-eslint/utils/ts-eslint").RuleModule<"member", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-anonymous-default-export": import("@typescript-eslint/utils/ts-eslint").RuleModule<"assign" | "anonymous", [({
                    allowArray?: boolean;
                    allowArrowFunction?: boolean;
                    allowCallExpression?: boolean;
                    allowAnonymousClass?: boolean;
                    allowAnonymousFunction?: boolean;
                    allowLiteral?: boolean;
                    allowObject?: boolean;
                    allowNew?: boolean;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-rename-default": import("@typescript-eslint/utils/ts-eslint").RuleModule<"renameDefault", [((import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions & {
                    preventRenamingBindings?: boolean;
                }) | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-unused-modules": import("@typescript-eslint/utils/ts-eslint").RuleModule<"notFound" | "unused", {
                    src?: string[];
                    ignoreExports?: string[];
                    missingExports?: true;
                    unusedExports?: boolean;
                    ignoreUnusedTypeExports?: boolean;
                }[], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-commonjs": import("@typescript-eslint/utils/ts-eslint").RuleModule<"import" | "export", [(({
                    allowPrimitiveModules?: boolean;
                    allowRequire?: boolean;
                    allowConditionalRequire?: boolean;
                } | "allow-primitive-modules") | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-amd": import("@typescript-eslint/utils/ts-eslint").RuleModule<"amd", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-duplicates": import("@typescript-eslint/utils/ts-eslint").RuleModule<"duplicate", [({
                    considerQueryString?: boolean;
                    "prefer-inline"?: boolean;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                first: import("@typescript-eslint/utils/ts-eslint").RuleModule<"absolute" | "order", [(("absolute-first" | "disable-absolute-first") | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "max-dependencies": import("@typescript-eslint/utils/ts-eslint").RuleModule<"max", [({
                    ignoreTypeImports?: boolean;
                    max?: number;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-extraneous-dependencies": import("@typescript-eslint/utils/ts-eslint").RuleModule<"missing" | "pkgNotFound" | "pkgUnparsable" | "devDep" | "optDep", [({
                    packageDir?: string | string[];
                    devDependencies?: boolean | string[];
                    optionalDependencies?: boolean | string[];
                    peerDependencies?: boolean | string[];
                    bundledDependencies?: boolean | string[];
                    includeInternal?: boolean;
                    includeTypes?: boolean;
                    whitelist?: string[];
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-absolute-path": import("@typescript-eslint/utils/ts-eslint").RuleModule<"absolute", [(import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-nodejs-modules": import("@typescript-eslint/utils/ts-eslint").RuleModule<"builtin", [({
                    allow?: string[];
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-webpack-loader-syntax": import("@typescript-eslint/utils/ts-eslint").RuleModule<"unexpected", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                order: import("@typescript-eslint/utils/ts-eslint").RuleModule<"error" | "order" | "noLineWithinGroup" | "noLineBetweenGroups" | "oneLineBetweenGroups", [({
                    "newlines-between"?: "always" | "always-and-inside-groups" | "ignore" | "never";
                    alphabetize?: Partial<import("eslint-plugin-import-x/types.js").AlphabetizeOptions>;
                    distinctGroup?: boolean;
                    groups?: ReadonlyArray<import("eslint-plugin-import-x/types.js").Arrayable<import("eslint-plugin-import-x/types.js").ImportType>>;
                    pathGroupsExcludedImportTypes?: import("eslint-plugin-import-x/types.js").ImportType[];
                    pathGroups?: import("eslint-plugin-import-x/types.js").PathGroup[];
                    warnOnUnassignedImports?: boolean;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "newline-after-import": import("@typescript-eslint/utils/ts-eslint").RuleModule<"newline", [({
                    count?: number;
                    exactCount?: boolean;
                    considerComments?: boolean;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "prefer-default-export": import("@typescript-eslint/utils/ts-eslint").RuleModule<"any" | "single", [({
                    target?: "single" | "any";
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-default-export": import("@typescript-eslint/utils/ts-eslint").RuleModule<"preferNamed" | "noAliasDefault", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-named-export": import("@typescript-eslint/utils/ts-eslint").RuleModule<"noAllowed", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-dynamic-require": import("@typescript-eslint/utils/ts-eslint").RuleModule<"import" | "require", [({
                    esmodule?: boolean;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                unambiguous: import("@typescript-eslint/utils/ts-eslint").RuleModule<"module", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-unassigned-import": import("@typescript-eslint/utils/ts-eslint").RuleModule<"unassigned", [({
                    allow?: string[];
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-useless-path-segments": import("@typescript-eslint/utils/ts-eslint").RuleModule<"useless", [((import("eslint-plugin-import-x/utils/module-visitor.js").ModuleOptions & {
                    noUselessIndex?: boolean;
                }) | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "dynamic-import-chunkname": import("@typescript-eslint/utils/ts-eslint").RuleModule<"leadingComment" | "blockComment" | "paddedSpaces" | "webpackComment" | "chunknameFormat" | "webpackEagerModeNoChunkName" | "webpackRemoveEagerMode" | "webpackRemoveChunkName", [({
                    allowEmpty?: boolean;
                    importFunctions?: readonly string[];
                    webpackChunknameFormat?: string;
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-import-module-exports": import("@typescript-eslint/utils/ts-eslint").RuleModule<"notAllowed", [({
                    exceptions?: string[];
                } | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-empty-named-blocks": import("@typescript-eslint/utils/ts-eslint").RuleModule<"emptyNamed" | "unused" | "emptyImport", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "exports-last": import("@typescript-eslint/utils/ts-eslint").RuleModule<"end", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "no-deprecated": import("@typescript-eslint/utils/ts-eslint").RuleModule<"deprecated" | "deprecatedDesc", [], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
                "imports-first": import("@typescript-eslint/utils/ts-eslint").RuleModule<"absolute" | "order", [(("absolute-first" | "disable-absolute-first") | undefined)?], {
                    category?: string;
                    recommended?: true;
                }, import("@typescript-eslint/utils/ts-eslint").RuleListener>;
            };
            importXResolverCompat: typeof import("eslint-plugin-import-x/utils/resolve.js").importXResolverCompat;
        };
        readonly n: import("eslint").ESLint.Plugin & {
            configs: import("eslint-plugin-n").Configs;
        };
        readonly promise: any;
        readonly react: {
            deprecatedRules: Partial<{
                'boolean-prop-naming': import("eslint").Rule.RuleModule;
                'button-has-type': import("eslint").Rule.RuleModule;
                'checked-requires-onchange-or-readonly': import("eslint").Rule.RuleModule;
                'default-props-match-prop-types': import("eslint").Rule.RuleModule;
                'destructuring-assignment': import("eslint").Rule.RuleModule;
                'display-name': import("eslint").Rule.RuleModule;
                'forbid-component-props': import("eslint").Rule.RuleModule;
                'forbid-dom-props': import("eslint").Rule.RuleModule;
                'forbid-elements': import("eslint").Rule.RuleModule;
                'forbid-foreign-prop-types': import("eslint").Rule.RuleModule;
                'forbid-prop-types': import("eslint").Rule.RuleModule;
                'forward-ref-uses-ref': {
                    meta: {
                        docs: {
                            description: string;
                            category: string;
                            recommended: boolean;
                            url: string;
                        };
                        messages: {
                            missingRefParameter: string;
                            addRefParameter: string;
                            removeForwardRef: string;
                        };
                        schema: undefined[];
                        type: string;
                        hasSuggestions: boolean;
                    };
                    create(context: any): {
                        "FunctionExpression, ArrowFunctionExpression"(node: any): void;
                    };
                };
                'function-component-definition': import("eslint").Rule.RuleModule;
                'hook-use-state': import("eslint").Rule.RuleModule;
                'iframe-missing-sandbox': import("eslint").Rule.RuleModule;
                'jsx-boolean-value': import("eslint").Rule.RuleModule;
                'jsx-child-element-spacing': import("eslint").Rule.RuleModule;
                'jsx-closing-bracket-location': import("eslint").Rule.RuleModule;
                'jsx-closing-tag-location': import("eslint").Rule.RuleModule;
                'jsx-curly-spacing': import("eslint").Rule.RuleModule;
                'jsx-curly-newline': import("eslint").Rule.RuleModule;
                'jsx-equals-spacing': import("eslint").Rule.RuleModule;
                'jsx-filename-extension': import("eslint").Rule.RuleModule;
                'jsx-first-prop-new-line': import("eslint").Rule.RuleModule;
                'jsx-handler-names': import("eslint").Rule.RuleModule;
                'jsx-indent': import("eslint").Rule.RuleModule;
                'jsx-indent-props': import("eslint").Rule.RuleModule;
                'jsx-key': import("eslint").Rule.RuleModule;
                'jsx-max-depth': import("eslint").Rule.RuleModule;
                'jsx-max-props-per-line': import("eslint").Rule.RuleModule;
                'jsx-newline': import("eslint").Rule.RuleModule;
                'jsx-no-bind': import("eslint").Rule.RuleModule;
                'jsx-no-comment-textnodes': import("eslint").Rule.RuleModule;
                'jsx-no-constructed-context-values': import("eslint").Rule.RuleModule;
                'jsx-no-duplicate-props': import("eslint").Rule.RuleModule;
                'jsx-no-leaked-render': import("eslint").Rule.RuleModule;
                'jsx-no-literals': {
                    meta: import("eslint").Rule.RuleMetaData;
                    create(context: any): (false & {
                        Literal(node: any): void;
                        JSXAttribute(node: any): void;
                        JSXText(node: any): void;
                        TemplateLiteral(node: any): void;
                    }) | ({
                        ImportDeclaration(node: any): void;
                        VariableDeclaration(node: any): void;
                    } & {
                        Literal(node: any): void;
                        JSXAttribute(node: any): void;
                        JSXText(node: any): void;
                        TemplateLiteral(node: any): void;
                    });
                };
                'jsx-no-script-url': import("eslint").Rule.RuleModule;
                'jsx-no-target-blank': import("eslint").Rule.RuleModule;
                'jsx-no-useless-fragment': import("eslint").Rule.RuleModule;
                'jsx-one-expression-per-line': import("eslint").Rule.RuleModule;
                'jsx-no-undef': import("eslint").Rule.RuleModule;
                'jsx-curly-brace-presence': import("eslint").Rule.RuleModule;
                'jsx-pascal-case': import("eslint").Rule.RuleModule;
                'jsx-fragments': import("eslint").Rule.RuleModule;
                'jsx-props-no-multi-spaces': import("eslint").Rule.RuleModule;
                'jsx-props-no-spreading': import("eslint").Rule.RuleModule;
                'jsx-props-no-spread-multi': {
                    meta: {
                        docs: {
                            description: string;
                            category: string;
                            recommended: boolean;
                            url: string;
                        };
                        messages: {
                            noMultiSpreading: string;
                        };
                    };
                    create(context: any): {
                        JSXOpeningElement(node: any): void;
                    };
                };
                'jsx-sort-default-props': import("eslint").Rule.RuleModule;
                'jsx-sort-props': import("eslint").Rule.RuleModule;
                'jsx-space-before-closing': import("eslint").Rule.RuleModule;
                'jsx-tag-spacing': import("eslint").Rule.RuleModule;
                'jsx-uses-react': import("eslint").Rule.RuleModule;
                'jsx-uses-vars': import("eslint").Rule.RuleModule;
                'jsx-wrap-multilines': import("eslint").Rule.RuleModule;
                'no-invalid-html-attribute': import("eslint").Rule.RuleModule;
                'no-access-state-in-setstate': import("eslint").Rule.RuleModule;
                'no-adjacent-inline-elements': import("eslint").Rule.RuleModule;
                'no-array-index-key': import("eslint").Rule.RuleModule;
                'no-arrow-function-lifecycle': import("eslint").Rule.RuleModule;
                'no-children-prop': import("eslint").Rule.RuleModule;
                'no-danger': import("eslint").Rule.RuleModule;
                'no-danger-with-children': import("eslint").Rule.RuleModule;
                'no-deprecated': import("eslint").Rule.RuleModule;
                'no-did-mount-set-state': import("eslint").Rule.RuleModule;
                'no-did-update-set-state': import("eslint").Rule.RuleModule;
                'no-direct-mutation-state': import("eslint").Rule.RuleModule;
                'no-find-dom-node': import("eslint").Rule.RuleModule;
                'no-is-mounted': import("eslint").Rule.RuleModule;
                'no-multi-comp': import("eslint").Rule.RuleModule;
                'no-namespace': import("eslint").Rule.RuleModule;
                'no-set-state': import("eslint").Rule.RuleModule;
                'no-string-refs': import("eslint").Rule.RuleModule;
                'no-redundant-should-component-update': import("eslint").Rule.RuleModule;
                'no-render-return-value': import("eslint").Rule.RuleModule;
                'no-this-in-sfc': import("eslint").Rule.RuleModule;
                'no-typos': import("eslint").Rule.RuleModule;
                'no-unescaped-entities': import("eslint").Rule.RuleModule;
                'no-unknown-property': import("eslint").Rule.RuleModule;
                'no-unsafe': import("eslint").Rule.RuleModule;
                'no-unstable-nested-components': import("eslint").Rule.RuleModule;
                'no-unused-class-component-methods': import("eslint").Rule.RuleModule;
                'no-unused-prop-types': import("eslint").Rule.RuleModule;
                'no-unused-state': import("eslint").Rule.RuleModule;
                'no-object-type-as-default-prop': import("eslint").Rule.RuleModule;
                'no-will-update-set-state': import("eslint").Rule.RuleModule;
                'prefer-es6-class': import("eslint").Rule.RuleModule;
                'prefer-exact-props': import("eslint").Rule.RuleModule;
                'prefer-read-only-props': import("eslint").Rule.RuleModule;
                'prefer-stateless-function': import("eslint").Rule.RuleModule;
                'prop-types': import("eslint").Rule.RuleModule;
                'react-in-jsx-scope': import("eslint").Rule.RuleModule;
                'require-default-props': import("eslint").Rule.RuleModule;
                'require-optimization': import("eslint").Rule.RuleModule;
                'require-render-return': import("eslint").Rule.RuleModule;
                'self-closing-comp': import("eslint").Rule.RuleModule;
                'sort-comp': import("eslint").Rule.RuleModule;
                'sort-default-props': import("eslint").Rule.RuleModule;
                'sort-prop-types': import("eslint").Rule.RuleModule;
                'state-in-constructor': import("eslint").Rule.RuleModule;
                'static-property-placement': import("eslint").Rule.RuleModule;
                'style-prop-object': import("eslint").Rule.RuleModule;
                'void-dom-elements-no-children': import("eslint").Rule.RuleModule;
            }>;
            rules: {
                'boolean-prop-naming': import("eslint").Rule.RuleModule;
                'button-has-type': import("eslint").Rule.RuleModule;
                'checked-requires-onchange-or-readonly': import("eslint").Rule.RuleModule;
                'default-props-match-prop-types': import("eslint").Rule.RuleModule;
                'destructuring-assignment': import("eslint").Rule.RuleModule;
                'display-name': import("eslint").Rule.RuleModule;
                'forbid-component-props': import("eslint").Rule.RuleModule;
                'forbid-dom-props': import("eslint").Rule.RuleModule;
                'forbid-elements': import("eslint").Rule.RuleModule;
                'forbid-foreign-prop-types': import("eslint").Rule.RuleModule;
                'forbid-prop-types': import("eslint").Rule.RuleModule;
                'forward-ref-uses-ref': {
                    meta: {
                        docs: {
                            description: string;
                            category: string;
                            recommended: boolean;
                            url: string;
                        };
                        messages: {
                            missingRefParameter: string;
                            addRefParameter: string;
                            removeForwardRef: string;
                        };
                        schema: undefined[];
                        type: string;
                        hasSuggestions: boolean;
                    };
                    create(context: any): {
                        "FunctionExpression, ArrowFunctionExpression"(node: any): void;
                    };
                };
                'function-component-definition': import("eslint").Rule.RuleModule;
                'hook-use-state': import("eslint").Rule.RuleModule;
                'iframe-missing-sandbox': import("eslint").Rule.RuleModule;
                'jsx-boolean-value': import("eslint").Rule.RuleModule;
                'jsx-child-element-spacing': import("eslint").Rule.RuleModule;
                'jsx-closing-bracket-location': import("eslint").Rule.RuleModule;
                'jsx-closing-tag-location': import("eslint").Rule.RuleModule;
                'jsx-curly-spacing': import("eslint").Rule.RuleModule;
                'jsx-curly-newline': import("eslint").Rule.RuleModule;
                'jsx-equals-spacing': import("eslint").Rule.RuleModule;
                'jsx-filename-extension': import("eslint").Rule.RuleModule;
                'jsx-first-prop-new-line': import("eslint").Rule.RuleModule;
                'jsx-handler-names': import("eslint").Rule.RuleModule;
                'jsx-indent': import("eslint").Rule.RuleModule;
                'jsx-indent-props': import("eslint").Rule.RuleModule;
                'jsx-key': import("eslint").Rule.RuleModule;
                'jsx-max-depth': import("eslint").Rule.RuleModule;
                'jsx-max-props-per-line': import("eslint").Rule.RuleModule;
                'jsx-newline': import("eslint").Rule.RuleModule;
                'jsx-no-bind': import("eslint").Rule.RuleModule;
                'jsx-no-comment-textnodes': import("eslint").Rule.RuleModule;
                'jsx-no-constructed-context-values': import("eslint").Rule.RuleModule;
                'jsx-no-duplicate-props': import("eslint").Rule.RuleModule;
                'jsx-no-leaked-render': import("eslint").Rule.RuleModule;
                'jsx-no-literals': {
                    meta: import("eslint").Rule.RuleMetaData;
                    create(context: any): (false & {
                        Literal(node: any): void;
                        JSXAttribute(node: any): void;
                        JSXText(node: any): void;
                        TemplateLiteral(node: any): void;
                    }) | ({
                        ImportDeclaration(node: any): void;
                        VariableDeclaration(node: any): void;
                    } & {
                        Literal(node: any): void;
                        JSXAttribute(node: any): void;
                        JSXText(node: any): void;
                        TemplateLiteral(node: any): void;
                    });
                };
                'jsx-no-script-url': import("eslint").Rule.RuleModule;
                'jsx-no-target-blank': import("eslint").Rule.RuleModule;
                'jsx-no-useless-fragment': import("eslint").Rule.RuleModule;
                'jsx-one-expression-per-line': import("eslint").Rule.RuleModule;
                'jsx-no-undef': import("eslint").Rule.RuleModule;
                'jsx-curly-brace-presence': import("eslint").Rule.RuleModule;
                'jsx-pascal-case': import("eslint").Rule.RuleModule;
                'jsx-fragments': import("eslint").Rule.RuleModule;
                'jsx-props-no-multi-spaces': import("eslint").Rule.RuleModule;
                'jsx-props-no-spreading': import("eslint").Rule.RuleModule;
                'jsx-props-no-spread-multi': {
                    meta: {
                        docs: {
                            description: string;
                            category: string;
                            recommended: boolean;
                            url: string;
                        };
                        messages: {
                            noMultiSpreading: string;
                        };
                    };
                    create(context: any): {
                        JSXOpeningElement(node: any): void;
                    };
                };
                'jsx-sort-default-props': import("eslint").Rule.RuleModule;
                'jsx-sort-props': import("eslint").Rule.RuleModule;
                'jsx-space-before-closing': import("eslint").Rule.RuleModule;
                'jsx-tag-spacing': import("eslint").Rule.RuleModule;
                'jsx-uses-react': import("eslint").Rule.RuleModule;
                'jsx-uses-vars': import("eslint").Rule.RuleModule;
                'jsx-wrap-multilines': import("eslint").Rule.RuleModule;
                'no-invalid-html-attribute': import("eslint").Rule.RuleModule;
                'no-access-state-in-setstate': import("eslint").Rule.RuleModule;
                'no-adjacent-inline-elements': import("eslint").Rule.RuleModule;
                'no-array-index-key': import("eslint").Rule.RuleModule;
                'no-arrow-function-lifecycle': import("eslint").Rule.RuleModule;
                'no-children-prop': import("eslint").Rule.RuleModule;
                'no-danger': import("eslint").Rule.RuleModule;
                'no-danger-with-children': import("eslint").Rule.RuleModule;
                'no-deprecated': import("eslint").Rule.RuleModule;
                'no-did-mount-set-state': import("eslint").Rule.RuleModule;
                'no-did-update-set-state': import("eslint").Rule.RuleModule;
                'no-direct-mutation-state': import("eslint").Rule.RuleModule;
                'no-find-dom-node': import("eslint").Rule.RuleModule;
                'no-is-mounted': import("eslint").Rule.RuleModule;
                'no-multi-comp': import("eslint").Rule.RuleModule;
                'no-namespace': import("eslint").Rule.RuleModule;
                'no-set-state': import("eslint").Rule.RuleModule;
                'no-string-refs': import("eslint").Rule.RuleModule;
                'no-redundant-should-component-update': import("eslint").Rule.RuleModule;
                'no-render-return-value': import("eslint").Rule.RuleModule;
                'no-this-in-sfc': import("eslint").Rule.RuleModule;
                'no-typos': import("eslint").Rule.RuleModule;
                'no-unescaped-entities': import("eslint").Rule.RuleModule;
                'no-unknown-property': import("eslint").Rule.RuleModule;
                'no-unsafe': import("eslint").Rule.RuleModule;
                'no-unstable-nested-components': import("eslint").Rule.RuleModule;
                'no-unused-class-component-methods': import("eslint").Rule.RuleModule;
                'no-unused-prop-types': import("eslint").Rule.RuleModule;
                'no-unused-state': import("eslint").Rule.RuleModule;
                'no-object-type-as-default-prop': import("eslint").Rule.RuleModule;
                'no-will-update-set-state': import("eslint").Rule.RuleModule;
                'prefer-es6-class': import("eslint").Rule.RuleModule;
                'prefer-exact-props': import("eslint").Rule.RuleModule;
                'prefer-read-only-props': import("eslint").Rule.RuleModule;
                'prefer-stateless-function': import("eslint").Rule.RuleModule;
                'prop-types': import("eslint").Rule.RuleModule;
                'react-in-jsx-scope': import("eslint").Rule.RuleModule;
                'require-default-props': import("eslint").Rule.RuleModule;
                'require-optimization': import("eslint").Rule.RuleModule;
                'require-render-return': import("eslint").Rule.RuleModule;
                'self-closing-comp': import("eslint").Rule.RuleModule;
                'sort-comp': import("eslint").Rule.RuleModule;
                'sort-default-props': import("eslint").Rule.RuleModule;
                'sort-prop-types': import("eslint").Rule.RuleModule;
                'state-in-constructor': import("eslint").Rule.RuleModule;
                'static-property-placement': import("eslint").Rule.RuleModule;
                'style-prop-object': import("eslint").Rule.RuleModule;
                'void-dom-elements-no-children': import("eslint").Rule.RuleModule;
            };
            configs: {
                recommended: {
                    plugins: ["react"];
                    parserOptions: {
                        ecmaFeatures: {
                            jsx: boolean;
                        };
                    };
                    rules: {
                        "react/display-name": number;
                        "react/jsx-key": number;
                        "react/jsx-no-comment-textnodes": number;
                        "react/jsx-no-duplicate-props": number;
                        "react/jsx-no-target-blank": number;
                        "react/jsx-no-undef": number;
                        "react/jsx-uses-react": number;
                        "react/jsx-uses-vars": number;
                        "react/no-children-prop": number;
                        "react/no-danger-with-children": number;
                        "react/no-deprecated": number;
                        "react/no-direct-mutation-state": number;
                        "react/no-find-dom-node": number;
                        "react/no-is-mounted": number;
                        "react/no-render-return-value": number;
                        "react/no-string-refs": number;
                        "react/no-unescaped-entities": number;
                        "react/no-unknown-property": number;
                        "react/no-unsafe": number;
                        "react/prop-types": number;
                        "react/react-in-jsx-scope": number;
                        "react/require-render-return": number;
                    };
                };
                all: {
                    plugins: ["react"];
                    parserOptions: {
                        ecmaFeatures: {
                            jsx: boolean;
                        };
                    };
                    rules: Record<"boolean-prop-naming" | "button-has-type" | "checked-requires-onchange-or-readonly" | "default-props-match-prop-types" | "destructuring-assignment" | "display-name" | "forbid-component-props" | "forbid-dom-props" | "forbid-elements" | "forbid-foreign-prop-types" | "forbid-prop-types" | "prop-types" | "forward-ref-uses-ref" | "function-component-definition" | "hook-use-state" | "iframe-missing-sandbox" | "jsx-boolean-value" | "jsx-child-element-spacing" | "jsx-closing-bracket-location" | "jsx-closing-tag-location" | "jsx-curly-spacing" | "jsx-curly-newline" | "jsx-equals-spacing" | "jsx-filename-extension" | "jsx-first-prop-new-line" | "jsx-handler-names" | "jsx-indent" | "jsx-indent-props" | "jsx-key" | "jsx-max-depth" | "jsx-max-props-per-line" | "jsx-newline" | "jsx-no-bind" | "jsx-no-comment-textnodes" | "jsx-no-constructed-context-values" | "jsx-no-duplicate-props" | "jsx-no-leaked-render" | "jsx-no-literals" | "jsx-no-script-url" | "jsx-no-target-blank" | "jsx-no-useless-fragment" | "jsx-one-expression-per-line" | "jsx-no-undef" | "jsx-curly-brace-presence" | "jsx-pascal-case" | "jsx-fragments" | "jsx-props-no-multi-spaces" | "jsx-props-no-spreading" | "jsx-props-no-spread-multi" | "sort-default-props" | "jsx-sort-default-props" | "jsx-sort-props" | "jsx-tag-spacing" | "jsx-space-before-closing" | "jsx-uses-react" | "jsx-uses-vars" | "jsx-wrap-multilines" | "no-invalid-html-attribute" | "no-access-state-in-setstate" | "no-adjacent-inline-elements" | "no-array-index-key" | "no-arrow-function-lifecycle" | "no-children-prop" | "no-danger" | "no-danger-with-children" | "no-deprecated" | "no-direct-mutation-state" | "no-find-dom-node" | "no-is-mounted" | "no-multi-comp" | "no-namespace" | "no-set-state" | "no-string-refs" | "no-redundant-should-component-update" | "no-render-return-value" | "no-this-in-sfc" | "no-typos" | "no-unescaped-entities" | "no-unknown-property" | "no-unsafe" | "no-unstable-nested-components" | "no-unused-class-component-methods" | "no-unused-prop-types" | "no-unused-state" | "no-object-type-as-default-prop" | "prefer-es6-class" | "prefer-exact-props" | "prefer-read-only-props" | "prefer-stateless-function" | "react-in-jsx-scope" | "require-default-props" | "require-optimization" | "require-render-return" | "self-closing-comp" | "sort-comp" | "sort-prop-types" | "state-in-constructor" | "static-property-placement" | "style-prop-object" | "void-dom-elements-no-children" | "no-did-mount-set-state" | "no-did-update-set-state" | "no-will-update-set-state", 2 | "error">;
                };
                'jsx-runtime': {
                    plugins: ["react"];
                    parserOptions: {
                        ecmaFeatures: {
                            jsx: boolean;
                        };
                        jsxPragma: any;
                    };
                    rules: {
                        "react/react-in-jsx-scope": number;
                        "react/jsx-uses-react": number;
                    };
                };
            } & {
                flat?: Record<string, import("eslint-plugin-react").ReactFlatConfig>;
            };
        };
        readonly 'typescript-eslint': typeof import("typescript-eslint");
    };
}
export = _exports;
type NeostandardOptions = import("./lib/main").NeostandardOptions;
//# sourceMappingURL=index.d.ts.map