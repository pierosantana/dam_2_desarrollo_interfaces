import eslintPluginN = require("eslint-plugin-n");
export let name: string;
export namespace languageOptions {
    let ecmaVersion: 2022;
    let sourceType: "module";
    let globals: {
        document: "readonly";
        navigator: "readonly";
        window: "readonly";
        __dirname: false;
        __filename: false;
        AbortController: false;
        AbortSignal: false;
        atob: false;
        Blob: false;
        BroadcastChannel: false;
        btoa: false;
        Buffer: false;
        ByteLengthQueuingStrategy: false;
        clearImmediate: false;
        clearInterval: false;
        clearTimeout: false;
        CloseEvent: false;
        CompressionStream: false;
        console: false;
        CountQueuingStrategy: false;
        crypto: false;
        Crypto: false;
        CryptoKey: false;
        CustomEvent: false;
        DecompressionStream: false;
        DOMException: false;
        Event: false;
        EventTarget: false;
        exports: true;
        fetch: false;
        File: false;
        FormData: false;
        global: false;
        Headers: false;
        MessageChannel: false;
        MessageEvent: false;
        MessagePort: false;
        module: false;
        Navigator: false;
        performance: false;
        Performance: false;
        PerformanceEntry: false;
        PerformanceMark: false;
        PerformanceMeasure: false;
        PerformanceObserver: false;
        PerformanceObserverEntryList: false;
        PerformanceResourceTiming: false;
        process: false;
        queueMicrotask: false;
        ReadableByteStreamController: false;
        ReadableStream: false;
        ReadableStreamBYOBReader: false;
        ReadableStreamBYOBRequest: false;
        ReadableStreamDefaultController: false;
        ReadableStreamDefaultReader: false;
        Request: false;
        require: false;
        Response: false;
        setImmediate: false;
        setInterval: false;
        setTimeout: false;
        structuredClone: false;
        SubtleCrypto: false;
        TextDecoder: false;
        TextDecoderStream: false;
        TextEncoder: false;
        TextEncoderStream: false;
        TransformStream: false;
        TransformStreamDefaultController: false;
        URL: false;
        URLSearchParams: false;
        WebAssembly: false;
        WebSocket: false;
        WritableStream: false;
        WritableStreamDefaultController: false;
        WritableStreamDefaultWriter: false;
        AggregateError: false;
        Array: false;
        ArrayBuffer: false;
        Atomics: false;
        BigInt: false;
        BigInt64Array: false;
        BigUint64Array: false;
        Boolean: false;
        DataView: false;
        Date: false;
        decodeURI: false;
        decodeURIComponent: false;
        encodeURI: false;
        encodeURIComponent: false;
        Error: false;
        escape: false;
        eval: false;
        EvalError: false;
        FinalizationRegistry: false;
        Float32Array: false;
        Float64Array: false;
        Function: false;
        globalThis: false;
        Infinity: false;
        Int16Array: false;
        Int32Array: false;
        Int8Array: false;
        Intl: false;
        isFinite: false;
        isNaN: false;
        JSON: false;
        Map: false;
        Math: false;
        NaN: false;
        Number: false;
        Object: false;
        parseFloat: false;
        parseInt: false;
        Promise: false;
        Proxy: false;
        RangeError: false;
        ReferenceError: false;
        Reflect: false;
        RegExp: false;
        Set: false;
        SharedArrayBuffer: false;
        String: false;
        Symbol: false;
        SyntaxError: false;
        TypeError: false;
        Uint16Array: false;
        Uint32Array: false;
        Uint8Array: false;
        Uint8ClampedArray: false;
        undefined: false;
        unescape: false;
        URIError: false;
        WeakMap: false;
        WeakRef: false;
        WeakSet: false;
    };
}
export let plugins: {
    'import-x': import("eslint").ESLint.Plugin;
    n: import("eslint").ESLint.Plugin & {
        configs: eslintPluginN.Configs;
    };
    promise: any;
};
export let rules: {
    'no-var': "warn";
    'object-shorthand': ["warn", string];
    'accessor-pairs': ["error", {
        setWithoutGet: boolean;
        enforceForClassMembers: boolean;
    }];
    'array-callback-return': ["error", {
        allowImplicit: boolean;
        checkForEach: boolean;
    }];
    camelcase: ["error", {
        allow: string[];
        properties: string;
        ignoreGlobals: boolean;
    }];
    'constructor-super': "error";
    curly: ["error", string];
    'default-case-last': "error";
    'dot-notation': ["error", {
        allowKeywords: boolean;
    }];
    eqeqeq: ["error", string, {
        null: string;
    }];
    'new-cap': ["error", {
        newIsCap: boolean;
        capIsNew: boolean;
        properties: boolean;
    }];
    'no-array-constructor': "error";
    'no-async-promise-executor': "error";
    'no-caller': "error";
    'no-case-declarations': "error";
    'no-class-assign': "error";
    'no-compare-neg-zero': "error";
    'no-cond-assign': "error";
    'no-const-assign': "error";
    'no-constant-condition': ["error", {
        checkLoops: boolean;
    }];
    'no-control-regex': "error";
    'no-debugger': "error";
    'no-delete-var': "error";
    'no-dupe-args': "error";
    'no-dupe-class-members': "error";
    'no-dupe-keys': "error";
    'no-duplicate-case': "error";
    'no-useless-backreference': "error";
    'no-empty': ["error", {
        allowEmptyCatch: boolean;
    }];
    'no-empty-character-class': "error";
    'no-empty-pattern': "error";
    'no-eval': "error";
    'no-ex-assign': "error";
    'no-extend-native': "error";
    'no-extra-bind': "error";
    'no-extra-boolean-cast': "error";
    'no-fallthrough': "error";
    'no-func-assign': "error";
    'no-global-assign': "error";
    'no-implied-eval': "error";
    'no-import-assign': "error";
    'no-invalid-regexp': "error";
    'no-irregular-whitespace': "error";
    'no-iterator': "error";
    'no-labels': ["error", {
        allowLoop: boolean;
        allowSwitch: boolean;
    }];
    'no-lone-blocks': "error";
    'no-loss-of-precision': "error";
    'no-misleading-character-class': "error";
    'no-prototype-builtins': "error";
    'no-useless-catch': "error";
    'no-multi-str': "error";
    'no-new': "error";
    'no-new-func': "error";
    'no-object-constructor': "error";
    'no-new-native-nonconstructor': "error";
    'no-new-wrappers': "error";
    'no-obj-calls': "error";
    'no-octal': "error";
    'no-octal-escape': "error";
    'no-proto': "error";
    'no-redeclare': ["error", {
        builtinGlobals: boolean;
    }];
    'no-regex-spaces': "error";
    'no-return-assign': ["error", string];
    'no-self-assign': ["error", {
        props: boolean;
    }];
    'no-self-compare': "error";
    'no-sequences': "error";
    'no-shadow-restricted-names': "error";
    'no-sparse-arrays': "error";
    'no-template-curly-in-string': "error";
    'no-this-before-super': "error";
    'no-throw-literal': "error";
    'no-undef': "error";
    'no-undef-init': "error";
    'no-unexpected-multiline': "error";
    'no-unmodified-loop-condition': "error";
    'no-unneeded-ternary': ["error", {
        defaultAssignment: boolean;
    }];
    'no-unreachable': "error";
    'no-unreachable-loop': "error";
    'no-unsafe-finally': "error";
    'no-unsafe-negation': "error";
    'no-unused-expressions': ["error", {
        allowShortCircuit: boolean;
        allowTernary: boolean;
        allowTaggedTemplates: boolean;
    }];
    'no-unused-vars': ["error", {
        args: string;
        caughtErrors: string;
        ignoreRestSiblings: boolean;
        vars: string;
    }];
    'no-use-before-define': ["error", {
        functions: boolean;
        classes: boolean;
        variables: boolean;
    }];
    'no-useless-call': "error";
    'no-useless-computed-key': "error";
    'no-useless-constructor': "error";
    'no-useless-escape': "error";
    'no-useless-rename': "error";
    'no-useless-return': "error";
    'no-void': "error";
    'no-with': "error";
    'one-var': ["error", {
        initialized: string;
    }];
    'prefer-const': ["error", {
        destructuring: string;
    }];
    'prefer-promise-reject-errors': "error";
    'prefer-regex-literals': ["error", {
        disallowRedundantWrapping: boolean;
    }];
    'symbol-description': "error";
    'unicode-bom': ["error", string];
    'use-isnan': ["error", {
        enforceForSwitchCase: boolean;
        enforceForIndexOf: boolean;
    }];
    'valid-typeof': ["error", {
        requireStringLiterals: boolean;
    }];
    yoda: ["error", string];
    'import-x/export': "error";
    'import-x/first': "error";
    'import-x/no-absolute-path': ["error", {
        esmodule: boolean;
        commonjs: boolean;
        amd: boolean;
    }];
    'import-x/no-duplicates': "error";
    'import-x/no-named-default': "error";
    'import-x/no-webpack-loader-syntax': "error";
    'n/handle-callback-err': ["error", string];
    'n/no-callback-literal': "error";
    'n/no-deprecated-api': "error";
    'n/no-exports-assign': "error";
    'n/no-new-require': "error";
    'n/no-path-concat': "error";
    'n/process-exit-as-throw': "error";
    'promise/param-names': "error";
};
//# sourceMappingURL=base.d.ts.map